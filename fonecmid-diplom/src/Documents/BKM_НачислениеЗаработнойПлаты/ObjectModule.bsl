
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если  ОсновныеНачисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 Тогда
		ТекстСообщения = "Обе табличные части документа пусты. Документ не проведен.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	
	СформироватьДвиженияПоОсновнымНачислениям(); 
	СформироватьСторноЗаписи();
	СформироватьДвиженияПоПремииПроцентом();
	СформироватьНДФЛ();
	РасчитатьОклады();	
	РассчитатьОтпускныеНачисления();
	РасчитатьНДФЛ(); 
	СформироватьВзаиморасчетыССотрудниками(); 
	СформироваДвиженияВыполненныеСотрудникомРаботы(Отказ)

КонецПроцедуры  

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Процедура СформироватьДвиженияПоОсновнымНачислениям() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_СписокСотрудников
		|ИЗ
		|	Документ.BKM_НачислениеЗаработнойПлаты.ОсновныеНачисления КАК BKM_НачислениеЗаработнойПлатыОсновныеНачисления
		|ГДЕ
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Ссылка = &Ссылка
		|	И BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ВидРасчета = &Оклад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СписокСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(BKM_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) КАК Оклад
		|ПОМЕСТИТЬ ВТ_Оклады
		|ИЗ
		|	ВТ_СписокСотрудников КАК ВТ_СписокСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
		|				&ДатаДокумента,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Сотрудник КАК Сотрудник
		|					ИЗ
		|						Документ.BKM_НачислениеЗаработнойПлаты.ОсновныеНачисления КАК BKM_НачислениеЗаработнойПлатыОсновныеНачисления
		|					ГДЕ
		|						BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Ссылка = &Ссылка
		|						И BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ВидРасчета = &Оклад)) КАК BKM_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВТ_СписокСотрудников.Сотрудник = BKM_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ДатаНачала КАК ПериодДействияНачало,
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ДатаОкончания КАК ПериодДействияКонец,
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.График КАК График,
		|	ВЫБОР
		|		КОГДА BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ВидРасчета = &Отпуск
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ДатаНачала, МЕСЯЦ, -12), МЕСЯЦ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ВидРасчета = &Отпуск
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(BKM_НачислениеЗаработнойПлатыОсновныеНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Ссылка.Дата КАК ПериодРегистрации,
		|	ЕСТЬNULL(ВТ_Оклады.Оклад, 0) КАК Показатель
		|ИЗ
		|	Документ.BKM_НачислениеЗаработнойПлаты.ОсновныеНачисления КАК BKM_НачислениеЗаработнойПлатыОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оклады КАК ВТ_Оклады
		|		ПО BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Сотрудник = ВТ_Оклады.Сотрудник
		|ГДЕ
		|	BKM_НачислениеЗаработнойПлатыОсновныеНачисления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("ДатаДокумента",(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Движения.ВКМ_ОсновныеНачисления.Записывать = Истина; 
	
	// регистр BKM_ОсновныеНачисления 	
	Пока Выборка.Следующий() Цикл 
		
		// Пропустить записи с нулевым или несуществующимим окладами
		Если Выборка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад 
			И Выборка.Показатель = 0 Тогда
			
			Продолжить;
	
		КонецЕсли; 
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;   
	Движения.ВКМ_ОсновныеНачисления.Записать();
		
КонецПроцедуры  

Процедура СформироватьСторноЗаписи()
      
      СторноЗаписи = Движения.ВКМ_ОсновныеНачисления.ПолучитьДополнение();
      
	  Если Не ЗначениеЗаполнено(СторноЗаписи) Тогда
	      Возврат;
	  КонецЕсли; 
	  
	  Для Каждого Запись Из СторноЗаписи Цикл
	      
	      // Движения по регистру ВКМ_ОсновныеНачисления
	      Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		  
	      ЗаполнитьЗначенияСвойств(Движение, Запись);
	      Движение.Сторно = Истина;
	      Движение.ПериодРегистрации = Дата;
	      Движение.ПериодДействияНачало = Запись.ПериодДействияНачалоСторно;
	      //@skip-check object-not-accessible-concrete-compatiblity-mode
	      //Ругается. Но если закомментировать неправильно считает сторно. (До конца месяца)
	      Движение.ПериодДействияКонец = Запись.ПериодДействияКонецСторно;
		        	  
	  КонецЦикла;
	  
	  Движения.ВКМ_ОсновныеНачисления.Записать();
	
КонецПроцедуры

Процедура СформироватьДвиженияПоПремииПроцентом()	
	
	// регистр BKM_ДополнительныеНачисления	                   
	
	Движения.ВКМ_ДополнительныеНачисления.Записывать = Истина;
	
	Для Каждого ТекСтрокаДополнительныеНачисления Из ДополнительныеНачисления Цикл
		
		Движение = Движения.ВКМ_ДополнительныеНачисления.Добавить();
		Движение.ВидРасчета = ПланыВидовРасчета.BKM_ДополнительныеНачисления.ПремияПроцентом;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = ТекСтрокаДополнительныеНачисления.Сотрудник;
		Движение.Результат = ТекСтрокаДополнительныеНачисления.СуммаНачисления;
		
	КонецЦикла;
	
	Движения.ВКМ_ДополнительныеНачисления.Записать();
	
КонецПроцедуры

Процедура СформироватьНДФЛ()
	
	СписокСотрудников = ОсновныеНачисления.Выгрузить(,"Сотрудник"); 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеНачисления,СписокСотрудников); 
	СписокСотрудников.Свернуть("Сотрудник"); 
	
	// регистр BKM_Удержания 
	Движения.ВКМ_Удержания.Записывать = Истина;
	
	Для Каждого Сотрудник Из СписокСотрудников  Цикл
		
		Движение = Движения.ВКМ_Удержания.Добавить(); 
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Движение.ПериодРегистрации = Дата;        
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
		Движение.Сотрудник = Сотрудник.Сотрудник;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать();	
	
КонецПроцедуры

Процедура РасчитатьОклады() 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BKM_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(BKM_ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК Норма,
		|	ЕСТЬNULL(BKM_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
		|	BKM_ОсновныеНачисленияДанныеГрафика.График
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Регистратор
		|	И ВидРасчета = &ВидРасчета) КАК BKM_ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Движения по регистру ВКМ_ОсновныеНачисления
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Если Выборка.Норма <> 0 Тогда
			Движение.Результат = Движение.Показатель * Выборка.Факт / Выборка.Норма;
		КонецЕсли;	
		
		Движение.ОтработаноДней = Выборка.Факт;
		
		Если Движение.Сторно Тогда 
			
			Движение.Результат = -Движение.Результат;
			Движение.ОтработаноДней = -Движение.ОтработаноДней;
			
		КонецЕсли;
		
	КонецЦикла; 
		
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура РассчитатьОтпускныеНачисления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BKM_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(BKM_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
		|	ЕСТЬNULL(BKM_ОсновныеНачисленияБазаBKM_ОсновныеНачисления.РезультатБаза, 0) + ЕСТЬNULL(BKM_ОсновныеНачисленияБазаBKM_ДополнительныеНачисления.РезультатБаза, 0) КАК РезультатБаза,
		|	ЕСТЬNULL(BKM_ОсновныеНачисленияБазаBKM_ОсновныеНачисления.ОтработаноДнейБаза, 0) КАК ОтработаноДнейБаза
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК BKM_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Регистратор
		|					И ВидРасчета = &Отпуск) КАК BKM_ОсновныеНачисленияБазаBKM_ОсновныеНачисления
		|		ПО BKM_ОсновныеНачисления.НомерСтроки = BKM_ОсновныеНачисленияБазаBKM_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Регистратор
		|					И ВидРасчета = &Отпуск) КАК BKM_ОсновныеНачисленияБазаBKM_ДополнительныеНачисления
		|		ПО BKM_ОсновныеНачисления.НомерСтроки = BKM_ОсновныеНачисленияБазаBKM_ДополнительныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|				Регистратор = &Регистратор
		|					И ВидРасчета = &Отпуск) КАК BKM_ОсновныеНачисленияДанныеГрафика
		|		ПО BKM_ОсновныеНачисления.НомерСтроки = BKM_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	BKM_ОсновныеНачисления.Регистратор = &Регистратор
		|	И BKM_ОсновныеНачисления.ВидРасчета = &Отпуск";
	
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Измерения = Новый Массив; 
	Измерения.Добавить("Сотрудник");
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки -1];
		
		Движение.Показатель =  Выборка.РезультатБаза;
	
		Если Выборка.ОтработаноДнейБаза <> 0 Тогда
			Движение.Результат = Выборка.РезультатБаза * Выборка.Факт / Выборка.ОтработаноДнейБаза ;
		КонецЕсли;		
		Движение.ОтработаноДней = Выборка.Факт;
		
		Если Движение.Сторно Тогда 
			
			Движение.Результат = -Движение.Результат; 
			Движение.ОтработаноДней = -Выборка.Факт;
		КонецЕсли;
			
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(,Истина); 
	
КонецПроцедуры

Процедура РасчитатьНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(BKM_УдержанияБазаBKM_ОсновныеНачисления.РезультатБаза, 0) КАК РезультатБазаОсновныеНачисления,
		|	ЕСТЬNULL(BKM_УдержанияБазаBKM_ОсновныеНачисления.НомерСтроки, 0) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ОсновныеНачисления(
		|			&Измерения,
		|			&Измерения,
		|			&Разрезы,
		|			Регистратор = &Ссылка
		|				И ВидРасчета = &НДФЛ) КАК BKM_УдержанияБазаBKM_ОсновныеНачисления
		|ГДЕ
		|	BKM_УдержанияБазаBKM_ОсновныеНачисления.Регистратор = BKM_УдержанияБазаBKM_ОсновныеНачисления.РегистраторРазрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(BKM_УдержанияБазаBKM_ДополнительныеНачисления.РезультатБаза, 0) КАК РезультатБазаДополнительныеНачисления,
		|	ЕСТЬNULL(BKM_УдержанияБазаBKM_ДополнительныеНачисления.НомерСтроки, 0) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДополнительныеНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ДополнительныеНачисления(
		|			&Измерения,
		|			&Измерения,
		|			&Разрезы,
		|			Регистратор = &Ссылка
		|				И ВидРасчета = &НДФЛ) КАК BKM_УдержанияБазаBKM_ДополнительныеНачисления
		|ГДЕ
		|	BKM_УдержанияБазаBKM_ДополнительныеНачисления.Регистратор = BKM_УдержанияБазаBKM_ДополнительныеНачисления.РегистраторРазрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДополнительныеНачисления.РезультатБазаДополнительныеНачисления, 0) + ЕСТЬNULL(ВТ_ОсновныеНачисления.РезультатБазаОсновныеНачисления, 0) КАК БазаНДФЛ,
		|	BKM_Удержания.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания КАК BKM_Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновныеНачисления КАК ВТ_ОсновныеНачисления
		|		ПО BKM_Удержания.НомерСтроки = ВТ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеНачисления КАК ВТ_ДополнительныеНачисления
		|		ПО BKM_Удержания.НомерСтроки = ВТ_ДополнительныеНачисления.НомерСтроки
		|ГДЕ
		|	BKM_Удержания.Регистратор = &Ссылка
		|	И BKM_Удержания.ВидРасчета = &НДФЛ"; 
	
	
	Запрос.УстановитьПараметр("НДФЛ", ПланыВидовРасчета.ВКМ_Удержания.НДФЛ);   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Измерения = Новый Массив; 
	Измерения.Добавить("Сотрудник");                                 
	
	Разрезы = Новый Массив; 
	Разрезы.Добавить("Регистратор");

	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	Запрос.УстановитьПараметр("Измерения", Измерения);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания[Выборка.НомерСтроки - 1];
		Движение.Результат = Выборка.БазаНДФЛ * 13 / 100;
		
	КонецЦикла;	

	Движения.ВКМ_Удержания.Записать(,Истина);
	
КонецПроцедуры

Процедура СформироватьВзаиморасчетыССотрудниками()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BKM_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(BKM_ОсновныеНачисления.Результат, 0) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Результаты
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК BKM_ОсновныеНачисления
		|ГДЕ
		|	BKM_ОсновныеНачисления.Регистратор = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	BKM_ДополнительныеНачисления.Сотрудник,
		|	ЕСТЬNULL(BKM_ДополнительныеНачисления.Результат, 0)
		|ИЗ
		|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК BKM_ДополнительныеНачисления
		|ГДЕ
		|	BKM_ДополнительныеНачисления.Регистратор = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	BKM_Удержания.Сотрудник,
		|	-ЕСТЬNULL(BKM_Удержания.Результат, 0)
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания КАК BKM_Удержания
		|ГДЕ
		|	BKM_Удержания.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Результаты.Сотрудник КАК Сотрудник,
		|	СУММА(ВТ_Результаты.Сумма) КАК Сумма
		|ИЗ
		|	ВТ_Результаты КАК ВТ_Результаты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Результаты.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// регистр BKM_ВзаиморасчетыССотрудниками Приход	
	Движения.BKM_ВзаиморасчетыССотрудниками.Записывать = Истина;
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.BKM_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.Сумма = Выборка.Сумма;
	
	КонецЦикла;
	
КонецПроцедуры 

Процедура СформироваДвиженияВыполненныеСотрудникомРаботы(Отказ)

	Движения.BKM_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Движения.BKM_ВыполненныеСотрудникомРаботы.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.BKM_ВыполненныеСотрудникомРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеНачисления;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
	
	Попытка
		Блокировка.Заблокировать();	
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Ошибка блокировки данных. Документ не проведен.",,,,Отказ);
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BKM_НачислениеЗаработнойПлатыДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|	СУММА(BKM_НачислениеЗаработнойПлатыДополнительныеНачисления.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(BKM_НачислениеЗаработнойПлатыДополнительныеНачисления.НачисленоЧасов) КАК НачисленоЧасов
		|ПОМЕСТИТЬ ВТ_Сотрудник
		|ИЗ
		|	Документ.BKM_НачислениеЗаработнойПлаты.ДополнительныеНачисления КАК BKM_НачислениеЗаработнойПлатыДополнительныеНачисления
		|ГДЕ
		|	BKM_НачислениеЗаработнойПлатыДополнительныеНачисления.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	BKM_НачислениеЗаработнойПлатыДополнительныеНачисления.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сотрудник.Сотрудник КАК Сотрудник,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_Сотрудник.Сотрудник) КАК ПредставлениеСотрудник,
		|	ВТ_Сотрудник.СуммаНачисления КАК СуммаКОплате,
		|	ВТ_Сотрудник.НачисленоЧасов КАК ЧасовКОплате,
		|	ЕСТЬNULL(BKM_ВыполненныеСотрудникомРаботыОстатки.СуммаКОплатеОстаток, 0) КАК СуммаКОплатеОстаток,
		|	ЕСТЬNULL(BKM_ВыполненныеСотрудникомРаботыОстатки.ЧасовКОплатеОстаток, 0) КАК ЧасовКОплатеОстаток
		|ИЗ
		|	ВТ_Сотрудник КАК ВТ_Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BKM_ВыполненныеСотрудникомРаботы.Остатки(
		|				&МоментВремени,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТ_Сотрудник.Сотрудник КАК Сотрудник
		|					ИЗ
		|						ВТ_Сотрудник КАК ВТ_Сотрудник)) КАК BKM_ВыполненныеСотрудникомРаботыОстатки
		|		ПО ВТ_Сотрудник.Сотрудник = BKM_ВыполненныеСотрудникомРаботыОстатки.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Движения.BKM_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Пока  Выборка.Следующий() Цикл
		
		Если Выборка.СуммаКОплате > Выборка.СуммаКОплатеОстаток Тогда
			
			ТекстСообщения = СтрШаблон("Документ не проведен. Для сотрудника %1 сумма начисления (%2) больше чем сумма за выполненные работы (%3)",
			Выборка.ПредставлениеСотрудник,Выборка.СуммаКОплате, Выборка.СуммаКОплатеОстаток);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ); 
			
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		//Движения по регистру BKM_ВыполненныеСотрудникомРаботы 
		Движение = Движения.BKM_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.СуммаКОплате = Выборка.СуммаКОплате;
		
		Если  Выборка.СуммаКОплате =  Выборка.СуммаКОплатеОстаток Тогда
			Движение.ЧасовКОплате = Выборка.ЧасовКОплатеОстаток;
		Иначе				 
			Движение.ЧасовКОплате = Выборка.ЧасовКОплате;
		Конецесли;
				
	КонецЦикла;
		
КонецПроцедуры


#КонецОбласти

#КонецЕсли