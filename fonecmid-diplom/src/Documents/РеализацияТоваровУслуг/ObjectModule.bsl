#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// ВКМ--
	//Движения.ОбработкаЗаказов.Записывать = Истина;
	//Движения.ОстаткиТоваров.Записывать = Истина;
	
	//Движение = Движения.ОбработкаЗаказов.Добавить();
	//Движение.Период = Дата;
	//Движение.Контрагент = Контрагент;
	//Движение.Договор = Договор;
	//Движение.Заказ = Основание;
	//Движение.СуммаОтгрузки = СуммаДокумента;

	//Для Каждого ТекСтрокаТовары Из Товары Цикл
	//	Движение = Движения.ОстаткиТоваров.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = Дата;
	//	Движение.Контрагент = Контрагент;
	//	Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
	//	Движение.Сумма = ТекСтрокаТовары.Сумма;
	//	Движение.Количество = ТекСтрокаТовары.Количество;
	//КонецЦикла;
	// ВКМ--
	//
	// ВКМ++
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.BKM_АбонентскоеОбслуживание Тогда
		
		Движение = Движения.ОбработкаЗаказов.Добавить();
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Договор = Договор;
		Движение.Заказ = Основание;
		Движение.СуммаОтгрузки = СуммаДокумента; 
		
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Контрагент = Контрагент;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Сумма = ТекСтрокаТовары.Сумма;
			Движение.Количество = ТекСтрокаТовары.Количество;
		КонецЦикла;
	Иначе 
		
		//Движения по регистру BKM_ВыполненныеКлиентуРаботы 
		СоздатьДвиженичBKM_ВыполненныеРаботыКлиенту(Отказ);
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
	// ВКМ++

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

// ВКМ++
Процедура BKM_ВыполнитьАвтозаполнение() Экспорт

	Отказ = Ложь;
	
	НоменклатураАбонентскаяПлата = Константы.BKM_НоменклатураАбонентскаяПлата.Получить();
	НоменклатураРаботыСпециалиста = Константы.BKM_НоменклатураРаботыСпециалиста.Получить();
	
	Если Не ЗначениеЗаполнено(НоменклатураАбонентскаяПлата) Тогда
		ТекстСообщения = "Значение константы НоменклатураАбонентскаяПлата не заполнено.";
		ОбщегоНазначения.СообщитьПользователю("Значение константы НоменклатураАбонентскаяПлата не заполнено.",,,,Отказ);
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, "Документ не проведен");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураРаботыСпециалиста) Тогда
		ТекстСообщения = "Значение константы НоменклатураРаботыСпециалиста не заполнено.";
		ОбщегоНазначения.СообщитьПользователю("Значение константы НоменклатураРаботыСпециалиста не заполнено.",,,,Отказ);
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, "Документ не проведен");
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Услуги.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты.КоличествоЧасовОборот, 0) + ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты.КоличествоЧасовНачальныйОстаток, 0) КАК КоличествоЧасовОборот,
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты.СуммаКОплатеОборот, 0) + ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты.СуммаКОплатеНачальныйОстаток, 0) КАК СуммаКОплатеОборот,
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты.Договор.BKM_СтоимостьЧасаРаботыСпециалиста, 0) КАК ДоговорBKM_СтоимостьЧасаРаботыСпециалиста
		|ПОМЕСТИТЬ ВТ_Обороты
		|ИЗ
		|	РегистрНакопления.BKM_ВыполненныеКлиентуРаботы.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Договор = &Договор
		|				И Клиент = &Контрагент) КАК BKM_ВыполненныеКлиентуРаботыОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботы.КоличествоЧасов, 0),
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботы.СуммаКОплате, 0),
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботы.Договор.BKM_СтоимостьЧасаРаботыСпециалиста, 0)
		|ИЗ
		|	РегистрНакопления.BKM_ВыполненныеКлиентуРаботы КАК BKM_ВыполненныеКлиентуРаботы
		|ГДЕ
		|	BKM_ВыполненныеКлиентуРаботы.Клиент = &Контрагент
		|	И BKM_ВыполненныеКлиентуРаботы.Договор = &Договор
		|	И BKM_ВыполненныеКлиентуРаботы.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_Обороты.КоличествоЧасовОборот) КАК КоличествоЧасовОборот,
		|	СУММА(ВТ_Обороты.СуммаКОплатеОборот) КАК СуммаКОплатеОборот,
		|	ВТ_Обороты.ДоговорBKM_СтоимостьЧасаРаботыСпециалиста КАК ДоговорBKM_СтоимостьЧасаРаботыСпециалиста
		|ПОМЕСТИТЬ ВТ_Сгруппировано
		|ИЗ
		|	ВТ_Обороты КАК ВТ_Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Обороты.ДоговорBKM_СтоимостьЧасаРаботыСпециалиста
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BKM_НоменклатураАбонентскаяПлата.Значение КАК Номенклатура,
		|	1 КАК Количество,
		|	ДоговорыКонтрагентов.BKM_ЕжемесячнаяАбонентскаяПлата КАК Цена,
		|	ДоговорыКонтрагентов.BKM_ЕжемесячнаяАбонентскаяПлата КАК Сумма
		|ИЗ
		|	Константа.BKM_НоменклатураАбонентскаяПлата КАК BKM_НоменклатураАбонентскаяПлата,
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И ДоговорыКонтрагентов.BKM_ЕжемесячнаяАбонентскаяПлата > 0
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	BKM_НоменклатураРаботыСпециалиста.Значение,
		|	ЕСТЬNULL(ВТ_Сгруппировано.КоличествоЧасовОборот, 0),
		|	ЕСТЬNULL(ВТ_Сгруппировано.ДоговорBKM_СтоимостьЧасаРаботыСпециалиста, 0),
		|	ЕСТЬNULL(ВТ_Сгруппировано.СуммаКОплатеОборот, 0)
		|ИЗ
		|	Константа.BKM_НоменклатураРаботыСпециалиста КАК BKM_НоменклатураРаботыСпециалиста,
		|	ВТ_Сгруппировано КАК ВТ_Сгруппировано";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	
	РезультатЗапроса = Запрос.Выполнить(); 

	Если  РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(),Услуги);
	СуммаДокумента = Услуги.Итог("Сумма");	

КонецПроцедуры
// BKM++

// BKM++
Процедура СоздатьДвиженичBKM_ВыполненныеРаботыКлиенту(Отказ)
	
	// Дополнительная проверка договора. (Мало-ли что произошло пока редактировали документ)
	Если Не ВКМ_ДополнениеРеализацияТоваровИУслугСервер.ДокументРеализацииТоваровИУслугЗаполненВерно(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проведение По старой методике. (Нужно предварительно вычислить ЧасыКОплате)
	
	Движения.BKM_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.BKM_ВыполненныеКлиентуРаботы.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.BKM_ВыполненныеКлиентуРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Клиент", Контрагент);
	ЭлементБлокировки.УстановитьЗначение("Договор", Договор);
	Попытка
		
		Блокировка.Заблокировать();
		
	Исключение
	
		ОбщегоНазначения.СообщитьПользователю("Произошла ошибка блокировки данных. Документ не проведен.",,,,Отказ);
		Возврат;
		
	КонецПопытки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(РеализацияТоваровУслугУслуги.Сумма, 0)) КАК СуммаКОплате,
		|	РеализацияТоваровУслуг.Договор КАК Договор,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РеализацияТоваровУслуг.Ссылка) КАК ПредставлениеДокумента
		|ПОМЕСТИТЬ ВТ_СуммаКОплате
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|	И РеализацияТоваровУслугУслуги.Номенклатура В
		|			(ВЫБРАТЬ
		|				BKM_НоменклатураРаботыСпециалиста.Значение КАК Значение
		|			ИЗ
		|				Константа.BKM_НоменклатураРаботыСпециалиста КАК BKM_НоменклатураРаботыСпециалиста)
		|	И РеализацияТоваровУслуг.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслуг.Договор,
		|	РеализацияТоваровУслуг.Контрагент,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РеализацияТоваровУслуг.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СуммаКОплате.СуммаКОплате КАК СуммаКОплате,
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстатки.КоличествоЧасовОстаток, 0) КАК КоличествоЧасовОстаток,
		|	ЕСТЬNULL(BKM_ВыполненныеКлиентуРаботыОстатки.СуммаКОплатеОстаток, 0) КАК СуммаКОплатеОстаток,
		|	ВТ_СуммаКОплате.Договор КАК Договор,
		|	ВТ_СуммаКОплате.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(ВТ_СуммаКОплате.Договор.BKM_СтоимостьЧасаРаботыСпециалиста, 0) КАК СтоимостьЧасаРаботыСпециалиста,
		|	ВТ_СуммаКОплате.ПредставлениеДокумента КАК ПредставлениеДокумента
		|ИЗ
		|	ВТ_СуммаКОплате КАК ВТ_СуммаКОплате
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.BKM_ВыполненныеКлиентуРаботы.Остатки(
		|				&МоментВремени,
		|				Договор = &Договор
		|					И Клиент = &Контрагент) КАК BKM_ВыполненныеКлиентуРаботыОстатки
		|		ПО ВТ_СуммаКОплате.Договор = BKM_ВыполненныеКлиентуРаботыОстатки.Договор
		|			И ВТ_СуммаКОплате.Контрагент = BKM_ВыполненныеКлиентуРаботыОстатки.Клиент";
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если  Выборка.Следующий() Тогда   //В выборке может быть только одна запись.
			
		Если Выборка.СуммаКОплате > Выборка.СуммаКОплатеОстаток Тогда
			
			ТекстСообщения = СтрШаблон("Документ %1 не проведен. Требуемая сумма(%2) больше чем сумма выполненных работ (%3)",
					Выборка.ПредставлениеДокумента, Выборка.СуммаКОплате, Выборка.СуммаКОплатеОстаток);
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, "Документ не проведен");

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
			
		КонецЕсли;
		
		
		
		Движения.BKM_ВыполненныеКлиентуРаботы.Записывать = Истина;
				
		Движение = Движения.BKM_ВыполненныеКлиентуРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Клиент = Контрагент;
		Движение.Договор = Договор;
		Движение.СуммаКОплате = Выборка.СуммаКОплате;
		
		Если Выборка.СуммаКОплате = Выборка.СуммаКОплатеОстаток Тогда
			Движение.КоличествоЧасов = Выборка.КоличествоЧасовОстаток;
		Иначе
			
			Если Выборка.СтоимостьЧасаРаботыСпециалиста <> 0 Тогда
				Движение.КоличествоЧасов = Выборка.СуммаКОплате/Выборка.СтоимостьЧасаРаботыСпециалиста;	
			КонецЕсли;
			
		КонецЕсли;	
					
	КонецЕсли;
	
КонецПроцедуры
// BKM++

#КонецОбласти

#КонецЕсли
